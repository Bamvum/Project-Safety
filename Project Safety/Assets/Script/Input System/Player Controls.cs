//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/Input System/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Main Menu"",
            ""id"": ""5c4a70db-c588-473b-8c2c-9d1030154fff"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""90a42c12-c737-4ee4-8bee-caeda480e965"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Category"",
                    ""type"": ""Button"",
                    ""id"": ""3ec8687d-910e-411a-8c73-15dd03ed6ff2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Category"",
                    ""type"": ""Button"",
                    ""id"": ""728e508b-f588-42c7-bce9-85248b7a7055"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""60cb7b17-bdb1-4943-b337-4fcdf0d36468"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ede3738d-956f-4ae6-af5d-b239749bd775"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c87e51ac-0d39-4ea0-9d33-eb180850f79d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd7a2fb3-912a-4639-bb3a-c91c19e6c760"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a19e8055-4932-47ad-be43-245c8f1f66db"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41ca0e94-72f1-481d-b0c1-ef7067c7dc33"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b91eb20-7fd1-4589-a8be-dec90f8fe6ac"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bc93d78-9fdd-4804-b453-d4c743fcb1f2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c40f9a54-368d-4af0-91cb-05e913f05117"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Loading UI"",
            ""id"": ""5593f047-3883-44fc-a57f-1b305e4e4c9e"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""e802b13c-6ba3-4eb1-aa4e-0f964953108d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b75126c2-acc7-49f3-a5a9-da25e6329052"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4b6a37e-5e19-4be1-9b56-dbb1e28d417f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""51c15480-5370-447b-adb0-c9ad5ac3cb07"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""36e1b5f6-e05f-44dc-977c-d1f1ef32e871"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a7507668-ddc6-49b3-a582-544465b17fc0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""1454e48b-ff70-4afb-8e1f-450107e355cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""acf2fb44-6f12-4a87-8c95-d5b6955dff70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""7fe1ce58-ad42-41a7-8625-af95789a3dd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Examine"",
                    ""type"": ""Button"",
                    ""id"": ""1c17f783-06a1-4f5f-a14f-c427c30fcb0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f83ab4bf-236a-4982-b3cf-964c124ad68e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""8d2e56b1-9f63-43e3-b82b-5c65341cfce9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""a642dcd7-bf03-4cdd-9896-026d89ca99a0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""46962e0b-8eeb-4595-b1d7-f2a1837c0b09"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3a524619-135e-4965-bba6-05076d230445"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""12528707-34b9-4c63-a6a0-7a5e068a4152"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""219e7a0e-741d-43f5-a6da-039a27f7faf0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""019eff02-2935-4c59-b027-51a6f9f58990"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f843dc89-bd7e-416b-9618-eb3d43882359"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aff8db38-1dab-462c-b39f-f73f3301e6ed"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fca2e006-2f1b-4dd0-8546-703fc2acf8e3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99448c01-6848-4a4a-a800-9529dd18b3fe"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bf35011-2197-4aed-a160-36a5a1f987bc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""249bfb3f-a898-489d-8810-25171b5ab578"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""136b35e4-08b0-4c90-822d-c869673fd296"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3770c3a9-782f-4468-a3b7-c998349915d8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0231d4a9-6008-4127-88c1-c7eaf0b98ad9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Examine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70ef722c-2836-414e-adcf-ce249efdd7a4"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Examine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d50b73a-598c-473e-8fe2-d127e4d26d0a"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de13126-ec23-4033-b30a-2bc913555d97"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4e184b3-3e4d-4da4-8d66-fca7e99b22c3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5008bb9d-d55d-4422-86e8-cf8f945014d1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerLayingDown"",
            ""id"": ""2c545e5a-8a2a-4985-af5e-aff57401b011"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""78b5b408-d749-4183-9793-f42510d7e21b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""7f313553-77d3-4a05-bccb-a01d6f185900"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8ee114f-db31-4fdb-91cb-4000542df260"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a261a6d-62f3-4198-b799-f9871193764e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f47eb971-2df5-491c-839c-6abe0d5e9ff0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6603f9c-adf0-42d4-ba85-b879eb517419"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Examine"",
            ""id"": ""b56fbaaf-9e4b-4acc-9e7e-225d2b9f7b69"",
            ""actions"": [
                {
                    ""name"": ""Lock"",
                    ""type"": ""Button"",
                    ""id"": ""c906acd6-3cd4-424b-a77b-e90ae8886927"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95b6795f-b3ed-4fa6-939c-2bc4a203fe28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gamepad Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dcdb7bf6-9dee-4793-a068-ae37483059af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Read"",
                    ""type"": ""Button"",
                    ""id"": ""689e73a9-e957-4a30-9ca7-29e4efff7607"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""faa6b704-a643-4e35-93c9-4548a7a901b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33421041-c900-45d1-af5e-8c53fd3c4d79"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e44d668-d708-469a-8509-0b011c1a7918"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""318fafb9-c513-42de-a66a-31f18be736ec"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d60e27f8-4067-45c4-933e-05bab0e56b72"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gamepad Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86ccaf20-a5ed-42e9-92fa-6e7d6f57adee"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Read"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6760022-9f97-4dff-8c2b-6948dad324cc"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Read"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""982b3208-1f17-470b-a689-42fac24efdf1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9b80b81-c2e3-4341-8ae5-6ecbea42e8ef"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""484a4e61-0311-4856-97e2-36fbcac5fb0b"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""f9a8955b-055f-425d-9fd7-74b1c1b51be2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Category"",
                    ""type"": ""Button"",
                    ""id"": ""54c6c179-45d8-418f-ab4f-121ee9552539"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Category"",
                    ""type"": ""Button"",
                    ""id"": ""117a7e73-e174-4885-94ca-5cc3e59ebb26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""b4fde7cb-5361-40ed-bf59-e73acc415e68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97c0a529-af9e-42f7-82f9-e057690cf3e7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c91c776d-dd0c-425a-b819-c052ae529d70"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ad942f-9d9c-4c77-bbe2-6fe50ce7d851"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""171dc869-58cc-4a43-871b-6c701582c535"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dc6f317-f48c-4d1f-9bf8-f360e5092985"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e5a157b-9abc-4981-879d-f0ecbf55c301"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""849ed915-4897-4d81-ae4b-b21ea1b5530a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d9b4362-a975-4425-8e2a-35dc0625b26a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Speech Dialogue"",
            ""id"": ""b01883fb-61ca-4310-9e4a-01b18353cf7c"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""ffbb66fd-75ca-489e-b676-2ae6432e664e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option 1"",
                    ""type"": ""Button"",
                    ""id"": ""278ee2e1-4deb-4b61-9118-9f4ed220d85a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option 2"",
                    ""type"": ""Button"",
                    ""id"": ""5bd79307-d2b6-4031-91e7-8b08ccf12c13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option 3"",
                    ""type"": ""Button"",
                    ""id"": ""f10b7aaf-a99e-49af-b50e-dfe911270c9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f7b5253-d092-491d-9134-868f4987ae5c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea177573-a32f-494a-9f8b-dfe9471a57be"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4f44a63-e4e7-4eeb-96a7-2f8afa9f0868"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5f1aa92-b032-4d03-808f-0822c5d133e1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9de26f8-a7f4-4f75-975f-13c507c7b9e0"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""319f499a-3f27-4d4f-bb66-ea0c7a4870af"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4628f07-5f09-49d0-be9b-f04c5ce8b389"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f46e7948-bdab-4cc6-8c6a-23503295ff98"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Contact"",
            ""id"": ""e17599e3-f4d2-44c6-89a2-c1051c9081a4"",
            ""actions"": [
                {
                    ""name"": ""Contact1"",
                    ""type"": ""Button"",
                    ""id"": ""f922a647-e42a-429d-965f-390d2b669c25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Contact2"",
                    ""type"": ""Button"",
                    ""id"": ""a17564ae-bd42-46d9-a22b-295898818ee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Contact3"",
                    ""type"": ""Button"",
                    ""id"": ""16e7d19f-ee3c-4c74-83e2-376121e1fbe0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7a7bbfe-55d4-4bb4-a1fc-bf7fb85c3f53"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""687331cc-22c8-4f42-858b-c1e9b3594fde"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5998edd4-6286-447f-98a7-5ae84d916458"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67b8c092-4915-4417-9252-def9c3ea542f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10b76387-0eaa-4b23-96d8-6780e8a67a4d"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8efc36bf-be5b-4282-b447-63d238070b3a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TPASS"",
            ""id"": ""e5265785-d10d-4be7-a3e5-26a0831c059f"",
            ""actions"": [
                {
                    ""name"": ""Equip Extinguisher"",
                    ""type"": ""Button"",
                    ""id"": ""29078d43-08e3-4918-93ec-0aa3972bbe08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PerformTPASS"",
                    ""type"": ""Button"",
                    ""id"": ""a64a59f3-d08a-45c9-92a1-5b679f2bb783"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2707f742-4e84-49a2-bbdf-a3f5696f6633"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Equip Extinguisher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef2c525b-eed6-43b2-b098-4f1cec8e1508"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Equip Extinguisher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95bd24ab-2e07-4489-a892-9a83625b6934"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PerformTPASS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17642dce-d51b-4478-b543-a3ba88fce28e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PerformTPASS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TwistFE"",
            ""id"": ""178c81df-3667-4958-9eda-ca4f09c81fea"",
            ""actions"": [
                {
                    ""name"": ""Button 1"",
                    ""type"": ""Button"",
                    ""id"": ""b39f2e73-efa0-4c3b-8620-ae48e0671590"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 2"",
                    ""type"": ""Button"",
                    ""id"": ""dce60e61-afc7-4267-ab35-695d6928890a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 3"",
                    ""type"": ""Button"",
                    ""id"": ""4dd55d80-e77e-43e9-b65e-7f5aa85a8a04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 4"",
                    ""type"": ""Button"",
                    ""id"": ""4d38640f-8fe6-44d8-b78a-a2bd045dd4a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""304336a5-6102-4eb9-b53f-c39a72e815db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82a619a1-db1a-435d-a93c-25f8d4faeb3a"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66bd61e8-0f33-4931-b2cc-39363b7b3fe6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""210db986-504b-440e-aeed-0494c3503c54"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebbf5c3b-182f-4c00-b0ae-c3bdabf40ddc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41b67be7-f773-465f-94bb-0ce05a92ef0b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f4baa1a-6a55-4554-9571-f261ac5e47ae"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57721457-bbf7-4e50-abf1-64d6febec4c4"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PullFE"",
            ""id"": ""85be5eb6-0ae8-4a2a-bcd6-f5886c706f53"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""99f7896b-b28e-4c5d-8baa-6c026a34d2e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action Lock"",
                    ""type"": ""Button"",
                    ""id"": ""c83f9c82-b5c5-47a5-bf1e-d3a385ffc7ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b20e7ed6-4fb2-41d8-8261-4413a8a4588b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b144feeb-0509-4ed3-8e67-dc9cec3d8829"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5279220b-0310-40d4-a698-c768d7ba8dac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71dc329d-ed78-4681-bb13-556685a42852"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AimFE"",
            ""id"": ""9d1d243a-5745-4694-bade-a9c01a129eab"",
            ""actions"": [
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""bf64b167-6616-4e10-9aca-cfbcdd2c7002"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Examine"",
                    ""type"": ""Button"",
                    ""id"": ""db150f44-6732-41cb-bacd-f7e8bf2f7a3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""f9f24d60-6a72-457c-bc50-089e5d609219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option 1"",
                    ""type"": ""Button"",
                    ""id"": ""19f97c96-fb03-48b2-a0aa-b161afcfc154"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option 2"",
                    ""type"": ""Button"",
                    ""id"": ""f19cc28c-6190-40e1-9a91-ef956b48ffe9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07478af7-2503-431d-9438-28b6a85bd413"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ee84a77-9bcc-4dd3-9c20-01138b474d2d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4010172b-33c0-4629-95f4-4909478e52b3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Examine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c55b20e-76fa-471d-9a35-b126b28d733e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Examine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89ce9d05-e338-4cf6-b471-fbc0d6d96e7c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc97bcfe-2525-4813-829e-95df9f1cc425"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f885e28-8deb-4fcd-84be-053d3f363b6d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ae99ab1-ea9c-44df-bedf-15117f905645"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2351dc09-ce4b-4b83-86cb-4e656b65cacf"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d9c97a4-ab4a-439e-8b92-f2ea3ae3b436"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NavigateUI"",
            ""id"": ""f2ce3524-5751-4072-8c7e-fc05d86c2c2c"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ce23f380-1726-412a-972e-9d59b5a10787"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""57fe3356-a003-4078-bb6c-b2ae32d800a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8434fc4d-1db8-43b7-898e-be2232129d7b"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e0d4fce-159d-4b93-a1ca-13608280bc16"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc0cef84-0c05-4a2a-8494-fbab5ba0b3fa"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SqueezeSweepFE"",
            ""id"": ""64430c91-1ec8-4863-84f3-2a767ee5b624"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""6ed9a44e-2720-4f27-bb8c-f5b76a255948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""739a6670-99bb-472b-9006-41fd49b15ea3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""748f5a6c-7267-48fb-98d5-37084ac0019b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Stay Calm"",
            ""id"": ""86713255-5319-4620-a2b5-d128c658c5f1"",
            ""actions"": [
                {
                    ""name"": ""Button 1"",
                    ""type"": ""Button"",
                    ""id"": ""fa65b01b-9643-4212-95ba-cde10fe0903c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 2"",
                    ""type"": ""Button"",
                    ""id"": ""b783a952-1355-47b3-a17d-f9d889a12efd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 3"",
                    ""type"": ""Button"",
                    ""id"": ""1f576e6a-562b-4b49-bc5f-8ad34c327dee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 4"",
                    ""type"": ""Button"",
                    ""id"": ""c9526c5f-9c3b-40e3-816a-6a52bfb5e168"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e1baa93-aecd-491f-947b-08049ec5c32c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c56d737d-6037-4dd1-87d6-4b6be3d85cab"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0112ca46-0e43-4998-b161-61af93a3c787"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33cafd82-3b91-491e-9092-5c6a0e66efac"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50ee5f48-5fa7-463f-b191-8ab52a1117f2"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bee8a043-cba7-4956-bb94-212730acaf6a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3d5f58f-84e9-4500-b385-040f6f416a82"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9899a034-53eb-42ed-af54-597a4af67485"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CheckDoor"",
            ""id"": ""c01fd5e1-14d7-4389-a646-66a90243b768"",
            ""actions"": [
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""0a1e4a83-b26f-4bfb-8264-a71de3c7483b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""eec293da-ee3b-436f-8361-60377483dd1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""ef71fe44-ad5e-4097-8e57-990d361658b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ff2994f-f52a-4d8d-ba13-9ed413e59b37"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5bae23f-21ed-4980-99f6-efe69da43abc"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c76c6f3d-316f-4665-b5c2-34d9477516a4"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""757f5aed-cada-43d6-893e-74eca798ba7b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48fbed1f-a244-4a70-8373-c7d8e4872708"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d169b7d-504a-464d-95d2-a5fc9be45b7d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Statistics"",
            ""id"": ""f065a32a-4204-4cc5-9288-d2720853a856"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""e88c404c-5d41-4c57-985a-9d58049df727"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""To Post Assessment"",
                    ""type"": ""Button"",
                    ""id"": ""e1234d17-3ad6-4b01-bdd8-48fa2073ab22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""To Main Menu"",
                    ""type"": ""Button"",
                    ""id"": ""2fab9f02-e373-44d3-8052-bc3780150f7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""539e6ff2-81a1-4231-aab6-19aead7f1860"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7cba890-e83c-472c-8c71-4fcaebaf5d51"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d94a8150-ed2b-436b-b507-9cae13ad48e9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""To Post Assessment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""618fa099-5aff-4fc7-b0b1-b412fac29615"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""To Post Assessment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b6e970a-5646-4b68-a052-5ca8bb83108b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""To Main Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0f97b73-2359-4522-bddb-78c6b59a1169"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""To Main Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main Menu
        m_MainMenu = asset.FindActionMap("Main Menu", throwIfNotFound: true);
        m_MainMenu_Action = m_MainMenu.FindAction("Action", throwIfNotFound: true);
        m_MainMenu_PreviousCategory = m_MainMenu.FindAction("Previous Category", throwIfNotFound: true);
        m_MainMenu_NextCategory = m_MainMenu.FindAction("Next Category", throwIfNotFound: true);
        m_MainMenu_Back = m_MainMenu.FindAction("Back", throwIfNotFound: true);
        // Loading UI
        m_LoadingUI = asset.FindActionMap("Loading UI", throwIfNotFound: true);
        m_LoadingUI_Action = m_LoadingUI.FindAction("Action", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Use = m_Player.FindAction("Use", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_Examine = m_Player.FindAction("Examine", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Drop = m_Player.FindAction("Drop", throwIfNotFound: true);
        // PlayerLayingDown
        m_PlayerLayingDown = asset.FindActionMap("PlayerLayingDown", throwIfNotFound: true);
        m_PlayerLayingDown_Look = m_PlayerLayingDown.FindAction("Look", throwIfNotFound: true);
        m_PlayerLayingDown_Action = m_PlayerLayingDown.FindAction("Action", throwIfNotFound: true);
        // Examine
        m_Examine = asset.FindActionMap("Examine", throwIfNotFound: true);
        m_Examine_Lock = m_Examine.FindAction("Lock", throwIfNotFound: true);
        m_Examine_Rotation = m_Examine.FindAction("Rotation", throwIfNotFound: true);
        m_Examine_GamepadRotation = m_Examine.FindAction("Gamepad Rotation", throwIfNotFound: true);
        m_Examine_Read = m_Examine.FindAction("Read", throwIfNotFound: true);
        m_Examine_Back = m_Examine.FindAction("Back", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Action = m_Pause.FindAction("Action", throwIfNotFound: true);
        m_Pause_PreviousCategory = m_Pause.FindAction("Previous Category", throwIfNotFound: true);
        m_Pause_NextCategory = m_Pause.FindAction("Next Category", throwIfNotFound: true);
        m_Pause_Back = m_Pause.FindAction("Back", throwIfNotFound: true);
        // Speech Dialogue
        m_SpeechDialogue = asset.FindActionMap("Speech Dialogue", throwIfNotFound: true);
        m_SpeechDialogue_Action = m_SpeechDialogue.FindAction("Action", throwIfNotFound: true);
        m_SpeechDialogue_Option1 = m_SpeechDialogue.FindAction("Option 1", throwIfNotFound: true);
        m_SpeechDialogue_Option2 = m_SpeechDialogue.FindAction("Option 2", throwIfNotFound: true);
        m_SpeechDialogue_Option3 = m_SpeechDialogue.FindAction("Option 3", throwIfNotFound: true);
        // Contact
        m_Contact = asset.FindActionMap("Contact", throwIfNotFound: true);
        m_Contact_Contact1 = m_Contact.FindAction("Contact1", throwIfNotFound: true);
        m_Contact_Contact2 = m_Contact.FindAction("Contact2", throwIfNotFound: true);
        m_Contact_Contact3 = m_Contact.FindAction("Contact3", throwIfNotFound: true);
        // TPASS
        m_TPASS = asset.FindActionMap("TPASS", throwIfNotFound: true);
        m_TPASS_EquipExtinguisher = m_TPASS.FindAction("Equip Extinguisher", throwIfNotFound: true);
        m_TPASS_PerformTPASS = m_TPASS.FindAction("PerformTPASS", throwIfNotFound: true);
        // TwistFE
        m_TwistFE = asset.FindActionMap("TwistFE", throwIfNotFound: true);
        m_TwistFE_Button1 = m_TwistFE.FindAction("Button 1", throwIfNotFound: true);
        m_TwistFE_Button2 = m_TwistFE.FindAction("Button 2", throwIfNotFound: true);
        m_TwistFE_Button3 = m_TwistFE.FindAction("Button 3", throwIfNotFound: true);
        m_TwistFE_Button4 = m_TwistFE.FindAction("Button 4", throwIfNotFound: true);
        // PullFE
        m_PullFE = asset.FindActionMap("PullFE", throwIfNotFound: true);
        m_PullFE_Action = m_PullFE.FindAction("Action", throwIfNotFound: true);
        m_PullFE_ActionLock = m_PullFE.FindAction("Action Lock", throwIfNotFound: true);
        // AimFE
        m_AimFE = asset.FindActionMap("AimFE", throwIfNotFound: true);
        m_AimFE_Drop = m_AimFE.FindAction("Drop", throwIfNotFound: true);
        m_AimFE_Examine = m_AimFE.FindAction("Examine", throwIfNotFound: true);
        m_AimFE_Exit = m_AimFE.FindAction("Exit", throwIfNotFound: true);
        m_AimFE_Option1 = m_AimFE.FindAction("Option 1", throwIfNotFound: true);
        m_AimFE_Option2 = m_AimFE.FindAction("Option 2", throwIfNotFound: true);
        // NavigateUI
        m_NavigateUI = asset.FindActionMap("NavigateUI", throwIfNotFound: true);
        m_NavigateUI_Navigate = m_NavigateUI.FindAction("Navigate", throwIfNotFound: true);
        m_NavigateUI_Action = m_NavigateUI.FindAction("Action", throwIfNotFound: true);
        // SqueezeSweepFE
        m_SqueezeSweepFE = asset.FindActionMap("SqueezeSweepFE", throwIfNotFound: true);
        m_SqueezeSweepFE_Action = m_SqueezeSweepFE.FindAction("Action", throwIfNotFound: true);
        // Stay Calm
        m_StayCalm = asset.FindActionMap("Stay Calm", throwIfNotFound: true);
        m_StayCalm_Button1 = m_StayCalm.FindAction("Button 1", throwIfNotFound: true);
        m_StayCalm_Button2 = m_StayCalm.FindAction("Button 2", throwIfNotFound: true);
        m_StayCalm_Button3 = m_StayCalm.FindAction("Button 3", throwIfNotFound: true);
        m_StayCalm_Button4 = m_StayCalm.FindAction("Button 4", throwIfNotFound: true);
        // CheckDoor
        m_CheckDoor = asset.FindActionMap("CheckDoor", throwIfNotFound: true);
        m_CheckDoor_Open = m_CheckDoor.FindAction("Open", throwIfNotFound: true);
        m_CheckDoor_Test = m_CheckDoor.FindAction("Test", throwIfNotFound: true);
        m_CheckDoor_Exit = m_CheckDoor.FindAction("Exit", throwIfNotFound: true);
        // Statistics
        m_Statistics = asset.FindActionMap("Statistics", throwIfNotFound: true);
        m_Statistics_Back = m_Statistics.FindAction("Back", throwIfNotFound: true);
        m_Statistics_ToPostAssessment = m_Statistics.FindAction("To Post Assessment", throwIfNotFound: true);
        m_Statistics_ToMainMenu = m_Statistics.FindAction("To Main Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main Menu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_Action;
    private readonly InputAction m_MainMenu_PreviousCategory;
    private readonly InputAction m_MainMenu_NextCategory;
    private readonly InputAction m_MainMenu_Back;
    public struct MainMenuActions
    {
        private @PlayerControls m_Wrapper;
        public MainMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_MainMenu_Action;
        public InputAction @PreviousCategory => m_Wrapper.m_MainMenu_PreviousCategory;
        public InputAction @NextCategory => m_Wrapper.m_MainMenu_NextCategory;
        public InputAction @Back => m_Wrapper.m_MainMenu_Back;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @PreviousCategory.started += instance.OnPreviousCategory;
            @PreviousCategory.performed += instance.OnPreviousCategory;
            @PreviousCategory.canceled += instance.OnPreviousCategory;
            @NextCategory.started += instance.OnNextCategory;
            @NextCategory.performed += instance.OnNextCategory;
            @NextCategory.canceled += instance.OnNextCategory;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @PreviousCategory.started -= instance.OnPreviousCategory;
            @PreviousCategory.performed -= instance.OnPreviousCategory;
            @PreviousCategory.canceled -= instance.OnPreviousCategory;
            @NextCategory.started -= instance.OnNextCategory;
            @NextCategory.performed -= instance.OnNextCategory;
            @NextCategory.canceled -= instance.OnNextCategory;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // Loading UI
    private readonly InputActionMap m_LoadingUI;
    private List<ILoadingUIActions> m_LoadingUIActionsCallbackInterfaces = new List<ILoadingUIActions>();
    private readonly InputAction m_LoadingUI_Action;
    public struct LoadingUIActions
    {
        private @PlayerControls m_Wrapper;
        public LoadingUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_LoadingUI_Action;
        public InputActionMap Get() { return m_Wrapper.m_LoadingUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoadingUIActions set) { return set.Get(); }
        public void AddCallbacks(ILoadingUIActions instance)
        {
            if (instance == null || m_Wrapper.m_LoadingUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LoadingUIActionsCallbackInterfaces.Add(instance);
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(ILoadingUIActions instance)
        {
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(ILoadingUIActions instance)
        {
            if (m_Wrapper.m_LoadingUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILoadingUIActions instance)
        {
            foreach (var item in m_Wrapper.m_LoadingUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LoadingUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LoadingUIActions @LoadingUI => new LoadingUIActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Use;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_Examine;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Drop;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Use => m_Wrapper.m_Player_Use;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        public InputAction @Examine => m_Wrapper.m_Player_Examine;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Drop => m_Wrapper.m_Player_Drop;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Examine.started += instance.OnExamine;
            @Examine.performed += instance.OnExamine;
            @Examine.canceled += instance.OnExamine;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Examine.started -= instance.OnExamine;
            @Examine.performed -= instance.OnExamine;
            @Examine.canceled -= instance.OnExamine;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // PlayerLayingDown
    private readonly InputActionMap m_PlayerLayingDown;
    private List<IPlayerLayingDownActions> m_PlayerLayingDownActionsCallbackInterfaces = new List<IPlayerLayingDownActions>();
    private readonly InputAction m_PlayerLayingDown_Look;
    private readonly InputAction m_PlayerLayingDown_Action;
    public struct PlayerLayingDownActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerLayingDownActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_PlayerLayingDown_Look;
        public InputAction @Action => m_Wrapper.m_PlayerLayingDown_Action;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLayingDown; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLayingDownActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerLayingDownActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerLayingDownActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerLayingDownActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(IPlayerLayingDownActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(IPlayerLayingDownActions instance)
        {
            if (m_Wrapper.m_PlayerLayingDownActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerLayingDownActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerLayingDownActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerLayingDownActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerLayingDownActions @PlayerLayingDown => new PlayerLayingDownActions(this);

    // Examine
    private readonly InputActionMap m_Examine;
    private List<IExamineActions> m_ExamineActionsCallbackInterfaces = new List<IExamineActions>();
    private readonly InputAction m_Examine_Lock;
    private readonly InputAction m_Examine_Rotation;
    private readonly InputAction m_Examine_GamepadRotation;
    private readonly InputAction m_Examine_Read;
    private readonly InputAction m_Examine_Back;
    public struct ExamineActions
    {
        private @PlayerControls m_Wrapper;
        public ExamineActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lock => m_Wrapper.m_Examine_Lock;
        public InputAction @Rotation => m_Wrapper.m_Examine_Rotation;
        public InputAction @GamepadRotation => m_Wrapper.m_Examine_GamepadRotation;
        public InputAction @Read => m_Wrapper.m_Examine_Read;
        public InputAction @Back => m_Wrapper.m_Examine_Back;
        public InputActionMap Get() { return m_Wrapper.m_Examine; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExamineActions set) { return set.Get(); }
        public void AddCallbacks(IExamineActions instance)
        {
            if (instance == null || m_Wrapper.m_ExamineActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExamineActionsCallbackInterfaces.Add(instance);
            @Lock.started += instance.OnLock;
            @Lock.performed += instance.OnLock;
            @Lock.canceled += instance.OnLock;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @GamepadRotation.started += instance.OnGamepadRotation;
            @GamepadRotation.performed += instance.OnGamepadRotation;
            @GamepadRotation.canceled += instance.OnGamepadRotation;
            @Read.started += instance.OnRead;
            @Read.performed += instance.OnRead;
            @Read.canceled += instance.OnRead;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IExamineActions instance)
        {
            @Lock.started -= instance.OnLock;
            @Lock.performed -= instance.OnLock;
            @Lock.canceled -= instance.OnLock;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @GamepadRotation.started -= instance.OnGamepadRotation;
            @GamepadRotation.performed -= instance.OnGamepadRotation;
            @GamepadRotation.canceled -= instance.OnGamepadRotation;
            @Read.started -= instance.OnRead;
            @Read.performed -= instance.OnRead;
            @Read.canceled -= instance.OnRead;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IExamineActions instance)
        {
            if (m_Wrapper.m_ExamineActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExamineActions instance)
        {
            foreach (var item in m_Wrapper.m_ExamineActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExamineActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExamineActions @Examine => new ExamineActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_Action;
    private readonly InputAction m_Pause_PreviousCategory;
    private readonly InputAction m_Pause_NextCategory;
    private readonly InputAction m_Pause_Back;
    public struct PauseActions
    {
        private @PlayerControls m_Wrapper;
        public PauseActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_Pause_Action;
        public InputAction @PreviousCategory => m_Wrapper.m_Pause_PreviousCategory;
        public InputAction @NextCategory => m_Wrapper.m_Pause_NextCategory;
        public InputAction @Back => m_Wrapper.m_Pause_Back;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @PreviousCategory.started += instance.OnPreviousCategory;
            @PreviousCategory.performed += instance.OnPreviousCategory;
            @PreviousCategory.canceled += instance.OnPreviousCategory;
            @NextCategory.started += instance.OnNextCategory;
            @NextCategory.performed += instance.OnNextCategory;
            @NextCategory.canceled += instance.OnNextCategory;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @PreviousCategory.started -= instance.OnPreviousCategory;
            @PreviousCategory.performed -= instance.OnPreviousCategory;
            @PreviousCategory.canceled -= instance.OnPreviousCategory;
            @NextCategory.started -= instance.OnNextCategory;
            @NextCategory.performed -= instance.OnNextCategory;
            @NextCategory.canceled -= instance.OnNextCategory;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // Speech Dialogue
    private readonly InputActionMap m_SpeechDialogue;
    private List<ISpeechDialogueActions> m_SpeechDialogueActionsCallbackInterfaces = new List<ISpeechDialogueActions>();
    private readonly InputAction m_SpeechDialogue_Action;
    private readonly InputAction m_SpeechDialogue_Option1;
    private readonly InputAction m_SpeechDialogue_Option2;
    private readonly InputAction m_SpeechDialogue_Option3;
    public struct SpeechDialogueActions
    {
        private @PlayerControls m_Wrapper;
        public SpeechDialogueActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_SpeechDialogue_Action;
        public InputAction @Option1 => m_Wrapper.m_SpeechDialogue_Option1;
        public InputAction @Option2 => m_Wrapper.m_SpeechDialogue_Option2;
        public InputAction @Option3 => m_Wrapper.m_SpeechDialogue_Option3;
        public InputActionMap Get() { return m_Wrapper.m_SpeechDialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpeechDialogueActions set) { return set.Get(); }
        public void AddCallbacks(ISpeechDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_SpeechDialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpeechDialogueActionsCallbackInterfaces.Add(instance);
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @Option1.started += instance.OnOption1;
            @Option1.performed += instance.OnOption1;
            @Option1.canceled += instance.OnOption1;
            @Option2.started += instance.OnOption2;
            @Option2.performed += instance.OnOption2;
            @Option2.canceled += instance.OnOption2;
            @Option3.started += instance.OnOption3;
            @Option3.performed += instance.OnOption3;
            @Option3.canceled += instance.OnOption3;
        }

        private void UnregisterCallbacks(ISpeechDialogueActions instance)
        {
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @Option1.started -= instance.OnOption1;
            @Option1.performed -= instance.OnOption1;
            @Option1.canceled -= instance.OnOption1;
            @Option2.started -= instance.OnOption2;
            @Option2.performed -= instance.OnOption2;
            @Option2.canceled -= instance.OnOption2;
            @Option3.started -= instance.OnOption3;
            @Option3.performed -= instance.OnOption3;
            @Option3.canceled -= instance.OnOption3;
        }

        public void RemoveCallbacks(ISpeechDialogueActions instance)
        {
            if (m_Wrapper.m_SpeechDialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpeechDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_SpeechDialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpeechDialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpeechDialogueActions @SpeechDialogue => new SpeechDialogueActions(this);

    // Contact
    private readonly InputActionMap m_Contact;
    private List<IContactActions> m_ContactActionsCallbackInterfaces = new List<IContactActions>();
    private readonly InputAction m_Contact_Contact1;
    private readonly InputAction m_Contact_Contact2;
    private readonly InputAction m_Contact_Contact3;
    public struct ContactActions
    {
        private @PlayerControls m_Wrapper;
        public ContactActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Contact1 => m_Wrapper.m_Contact_Contact1;
        public InputAction @Contact2 => m_Wrapper.m_Contact_Contact2;
        public InputAction @Contact3 => m_Wrapper.m_Contact_Contact3;
        public InputActionMap Get() { return m_Wrapper.m_Contact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ContactActions set) { return set.Get(); }
        public void AddCallbacks(IContactActions instance)
        {
            if (instance == null || m_Wrapper.m_ContactActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ContactActionsCallbackInterfaces.Add(instance);
            @Contact1.started += instance.OnContact1;
            @Contact1.performed += instance.OnContact1;
            @Contact1.canceled += instance.OnContact1;
            @Contact2.started += instance.OnContact2;
            @Contact2.performed += instance.OnContact2;
            @Contact2.canceled += instance.OnContact2;
            @Contact3.started += instance.OnContact3;
            @Contact3.performed += instance.OnContact3;
            @Contact3.canceled += instance.OnContact3;
        }

        private void UnregisterCallbacks(IContactActions instance)
        {
            @Contact1.started -= instance.OnContact1;
            @Contact1.performed -= instance.OnContact1;
            @Contact1.canceled -= instance.OnContact1;
            @Contact2.started -= instance.OnContact2;
            @Contact2.performed -= instance.OnContact2;
            @Contact2.canceled -= instance.OnContact2;
            @Contact3.started -= instance.OnContact3;
            @Contact3.performed -= instance.OnContact3;
            @Contact3.canceled -= instance.OnContact3;
        }

        public void RemoveCallbacks(IContactActions instance)
        {
            if (m_Wrapper.m_ContactActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IContactActions instance)
        {
            foreach (var item in m_Wrapper.m_ContactActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ContactActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ContactActions @Contact => new ContactActions(this);

    // TPASS
    private readonly InputActionMap m_TPASS;
    private List<ITPASSActions> m_TPASSActionsCallbackInterfaces = new List<ITPASSActions>();
    private readonly InputAction m_TPASS_EquipExtinguisher;
    private readonly InputAction m_TPASS_PerformTPASS;
    public struct TPASSActions
    {
        private @PlayerControls m_Wrapper;
        public TPASSActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EquipExtinguisher => m_Wrapper.m_TPASS_EquipExtinguisher;
        public InputAction @PerformTPASS => m_Wrapper.m_TPASS_PerformTPASS;
        public InputActionMap Get() { return m_Wrapper.m_TPASS; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TPASSActions set) { return set.Get(); }
        public void AddCallbacks(ITPASSActions instance)
        {
            if (instance == null || m_Wrapper.m_TPASSActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TPASSActionsCallbackInterfaces.Add(instance);
            @EquipExtinguisher.started += instance.OnEquipExtinguisher;
            @EquipExtinguisher.performed += instance.OnEquipExtinguisher;
            @EquipExtinguisher.canceled += instance.OnEquipExtinguisher;
            @PerformTPASS.started += instance.OnPerformTPASS;
            @PerformTPASS.performed += instance.OnPerformTPASS;
            @PerformTPASS.canceled += instance.OnPerformTPASS;
        }

        private void UnregisterCallbacks(ITPASSActions instance)
        {
            @EquipExtinguisher.started -= instance.OnEquipExtinguisher;
            @EquipExtinguisher.performed -= instance.OnEquipExtinguisher;
            @EquipExtinguisher.canceled -= instance.OnEquipExtinguisher;
            @PerformTPASS.started -= instance.OnPerformTPASS;
            @PerformTPASS.performed -= instance.OnPerformTPASS;
            @PerformTPASS.canceled -= instance.OnPerformTPASS;
        }

        public void RemoveCallbacks(ITPASSActions instance)
        {
            if (m_Wrapper.m_TPASSActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITPASSActions instance)
        {
            foreach (var item in m_Wrapper.m_TPASSActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TPASSActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TPASSActions @TPASS => new TPASSActions(this);

    // TwistFE
    private readonly InputActionMap m_TwistFE;
    private List<ITwistFEActions> m_TwistFEActionsCallbackInterfaces = new List<ITwistFEActions>();
    private readonly InputAction m_TwistFE_Button1;
    private readonly InputAction m_TwistFE_Button2;
    private readonly InputAction m_TwistFE_Button3;
    private readonly InputAction m_TwistFE_Button4;
    public struct TwistFEActions
    {
        private @PlayerControls m_Wrapper;
        public TwistFEActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Button1 => m_Wrapper.m_TwistFE_Button1;
        public InputAction @Button2 => m_Wrapper.m_TwistFE_Button2;
        public InputAction @Button3 => m_Wrapper.m_TwistFE_Button3;
        public InputAction @Button4 => m_Wrapper.m_TwistFE_Button4;
        public InputActionMap Get() { return m_Wrapper.m_TwistFE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TwistFEActions set) { return set.Get(); }
        public void AddCallbacks(ITwistFEActions instance)
        {
            if (instance == null || m_Wrapper.m_TwistFEActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TwistFEActionsCallbackInterfaces.Add(instance);
            @Button1.started += instance.OnButton1;
            @Button1.performed += instance.OnButton1;
            @Button1.canceled += instance.OnButton1;
            @Button2.started += instance.OnButton2;
            @Button2.performed += instance.OnButton2;
            @Button2.canceled += instance.OnButton2;
            @Button3.started += instance.OnButton3;
            @Button3.performed += instance.OnButton3;
            @Button3.canceled += instance.OnButton3;
            @Button4.started += instance.OnButton4;
            @Button4.performed += instance.OnButton4;
            @Button4.canceled += instance.OnButton4;
        }

        private void UnregisterCallbacks(ITwistFEActions instance)
        {
            @Button1.started -= instance.OnButton1;
            @Button1.performed -= instance.OnButton1;
            @Button1.canceled -= instance.OnButton1;
            @Button2.started -= instance.OnButton2;
            @Button2.performed -= instance.OnButton2;
            @Button2.canceled -= instance.OnButton2;
            @Button3.started -= instance.OnButton3;
            @Button3.performed -= instance.OnButton3;
            @Button3.canceled -= instance.OnButton3;
            @Button4.started -= instance.OnButton4;
            @Button4.performed -= instance.OnButton4;
            @Button4.canceled -= instance.OnButton4;
        }

        public void RemoveCallbacks(ITwistFEActions instance)
        {
            if (m_Wrapper.m_TwistFEActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITwistFEActions instance)
        {
            foreach (var item in m_Wrapper.m_TwistFEActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TwistFEActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TwistFEActions @TwistFE => new TwistFEActions(this);

    // PullFE
    private readonly InputActionMap m_PullFE;
    private List<IPullFEActions> m_PullFEActionsCallbackInterfaces = new List<IPullFEActions>();
    private readonly InputAction m_PullFE_Action;
    private readonly InputAction m_PullFE_ActionLock;
    public struct PullFEActions
    {
        private @PlayerControls m_Wrapper;
        public PullFEActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_PullFE_Action;
        public InputAction @ActionLock => m_Wrapper.m_PullFE_ActionLock;
        public InputActionMap Get() { return m_Wrapper.m_PullFE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PullFEActions set) { return set.Get(); }
        public void AddCallbacks(IPullFEActions instance)
        {
            if (instance == null || m_Wrapper.m_PullFEActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PullFEActionsCallbackInterfaces.Add(instance);
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @ActionLock.started += instance.OnActionLock;
            @ActionLock.performed += instance.OnActionLock;
            @ActionLock.canceled += instance.OnActionLock;
        }

        private void UnregisterCallbacks(IPullFEActions instance)
        {
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @ActionLock.started -= instance.OnActionLock;
            @ActionLock.performed -= instance.OnActionLock;
            @ActionLock.canceled -= instance.OnActionLock;
        }

        public void RemoveCallbacks(IPullFEActions instance)
        {
            if (m_Wrapper.m_PullFEActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPullFEActions instance)
        {
            foreach (var item in m_Wrapper.m_PullFEActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PullFEActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PullFEActions @PullFE => new PullFEActions(this);

    // AimFE
    private readonly InputActionMap m_AimFE;
    private List<IAimFEActions> m_AimFEActionsCallbackInterfaces = new List<IAimFEActions>();
    private readonly InputAction m_AimFE_Drop;
    private readonly InputAction m_AimFE_Examine;
    private readonly InputAction m_AimFE_Exit;
    private readonly InputAction m_AimFE_Option1;
    private readonly InputAction m_AimFE_Option2;
    public struct AimFEActions
    {
        private @PlayerControls m_Wrapper;
        public AimFEActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drop => m_Wrapper.m_AimFE_Drop;
        public InputAction @Examine => m_Wrapper.m_AimFE_Examine;
        public InputAction @Exit => m_Wrapper.m_AimFE_Exit;
        public InputAction @Option1 => m_Wrapper.m_AimFE_Option1;
        public InputAction @Option2 => m_Wrapper.m_AimFE_Option2;
        public InputActionMap Get() { return m_Wrapper.m_AimFE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AimFEActions set) { return set.Get(); }
        public void AddCallbacks(IAimFEActions instance)
        {
            if (instance == null || m_Wrapper.m_AimFEActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AimFEActionsCallbackInterfaces.Add(instance);
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
            @Examine.started += instance.OnExamine;
            @Examine.performed += instance.OnExamine;
            @Examine.canceled += instance.OnExamine;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @Option1.started += instance.OnOption1;
            @Option1.performed += instance.OnOption1;
            @Option1.canceled += instance.OnOption1;
            @Option2.started += instance.OnOption2;
            @Option2.performed += instance.OnOption2;
            @Option2.canceled += instance.OnOption2;
        }

        private void UnregisterCallbacks(IAimFEActions instance)
        {
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
            @Examine.started -= instance.OnExamine;
            @Examine.performed -= instance.OnExamine;
            @Examine.canceled -= instance.OnExamine;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @Option1.started -= instance.OnOption1;
            @Option1.performed -= instance.OnOption1;
            @Option1.canceled -= instance.OnOption1;
            @Option2.started -= instance.OnOption2;
            @Option2.performed -= instance.OnOption2;
            @Option2.canceled -= instance.OnOption2;
        }

        public void RemoveCallbacks(IAimFEActions instance)
        {
            if (m_Wrapper.m_AimFEActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAimFEActions instance)
        {
            foreach (var item in m_Wrapper.m_AimFEActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AimFEActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AimFEActions @AimFE => new AimFEActions(this);

    // NavigateUI
    private readonly InputActionMap m_NavigateUI;
    private List<INavigateUIActions> m_NavigateUIActionsCallbackInterfaces = new List<INavigateUIActions>();
    private readonly InputAction m_NavigateUI_Navigate;
    private readonly InputAction m_NavigateUI_Action;
    public struct NavigateUIActions
    {
        private @PlayerControls m_Wrapper;
        public NavigateUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_NavigateUI_Navigate;
        public InputAction @Action => m_Wrapper.m_NavigateUI_Action;
        public InputActionMap Get() { return m_Wrapper.m_NavigateUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigateUIActions set) { return set.Get(); }
        public void AddCallbacks(INavigateUIActions instance)
        {
            if (instance == null || m_Wrapper.m_NavigateUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavigateUIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(INavigateUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(INavigateUIActions instance)
        {
            if (m_Wrapper.m_NavigateUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavigateUIActions instance)
        {
            foreach (var item in m_Wrapper.m_NavigateUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavigateUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavigateUIActions @NavigateUI => new NavigateUIActions(this);

    // SqueezeSweepFE
    private readonly InputActionMap m_SqueezeSweepFE;
    private List<ISqueezeSweepFEActions> m_SqueezeSweepFEActionsCallbackInterfaces = new List<ISqueezeSweepFEActions>();
    private readonly InputAction m_SqueezeSweepFE_Action;
    public struct SqueezeSweepFEActions
    {
        private @PlayerControls m_Wrapper;
        public SqueezeSweepFEActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_SqueezeSweepFE_Action;
        public InputActionMap Get() { return m_Wrapper.m_SqueezeSweepFE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SqueezeSweepFEActions set) { return set.Get(); }
        public void AddCallbacks(ISqueezeSweepFEActions instance)
        {
            if (instance == null || m_Wrapper.m_SqueezeSweepFEActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SqueezeSweepFEActionsCallbackInterfaces.Add(instance);
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
        }

        private void UnregisterCallbacks(ISqueezeSweepFEActions instance)
        {
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
        }

        public void RemoveCallbacks(ISqueezeSweepFEActions instance)
        {
            if (m_Wrapper.m_SqueezeSweepFEActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISqueezeSweepFEActions instance)
        {
            foreach (var item in m_Wrapper.m_SqueezeSweepFEActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SqueezeSweepFEActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SqueezeSweepFEActions @SqueezeSweepFE => new SqueezeSweepFEActions(this);

    // Stay Calm
    private readonly InputActionMap m_StayCalm;
    private List<IStayCalmActions> m_StayCalmActionsCallbackInterfaces = new List<IStayCalmActions>();
    private readonly InputAction m_StayCalm_Button1;
    private readonly InputAction m_StayCalm_Button2;
    private readonly InputAction m_StayCalm_Button3;
    private readonly InputAction m_StayCalm_Button4;
    public struct StayCalmActions
    {
        private @PlayerControls m_Wrapper;
        public StayCalmActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Button1 => m_Wrapper.m_StayCalm_Button1;
        public InputAction @Button2 => m_Wrapper.m_StayCalm_Button2;
        public InputAction @Button3 => m_Wrapper.m_StayCalm_Button3;
        public InputAction @Button4 => m_Wrapper.m_StayCalm_Button4;
        public InputActionMap Get() { return m_Wrapper.m_StayCalm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StayCalmActions set) { return set.Get(); }
        public void AddCallbacks(IStayCalmActions instance)
        {
            if (instance == null || m_Wrapper.m_StayCalmActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StayCalmActionsCallbackInterfaces.Add(instance);
            @Button1.started += instance.OnButton1;
            @Button1.performed += instance.OnButton1;
            @Button1.canceled += instance.OnButton1;
            @Button2.started += instance.OnButton2;
            @Button2.performed += instance.OnButton2;
            @Button2.canceled += instance.OnButton2;
            @Button3.started += instance.OnButton3;
            @Button3.performed += instance.OnButton3;
            @Button3.canceled += instance.OnButton3;
            @Button4.started += instance.OnButton4;
            @Button4.performed += instance.OnButton4;
            @Button4.canceled += instance.OnButton4;
        }

        private void UnregisterCallbacks(IStayCalmActions instance)
        {
            @Button1.started -= instance.OnButton1;
            @Button1.performed -= instance.OnButton1;
            @Button1.canceled -= instance.OnButton1;
            @Button2.started -= instance.OnButton2;
            @Button2.performed -= instance.OnButton2;
            @Button2.canceled -= instance.OnButton2;
            @Button3.started -= instance.OnButton3;
            @Button3.performed -= instance.OnButton3;
            @Button3.canceled -= instance.OnButton3;
            @Button4.started -= instance.OnButton4;
            @Button4.performed -= instance.OnButton4;
            @Button4.canceled -= instance.OnButton4;
        }

        public void RemoveCallbacks(IStayCalmActions instance)
        {
            if (m_Wrapper.m_StayCalmActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStayCalmActions instance)
        {
            foreach (var item in m_Wrapper.m_StayCalmActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StayCalmActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StayCalmActions @StayCalm => new StayCalmActions(this);

    // CheckDoor
    private readonly InputActionMap m_CheckDoor;
    private List<ICheckDoorActions> m_CheckDoorActionsCallbackInterfaces = new List<ICheckDoorActions>();
    private readonly InputAction m_CheckDoor_Open;
    private readonly InputAction m_CheckDoor_Test;
    private readonly InputAction m_CheckDoor_Exit;
    public struct CheckDoorActions
    {
        private @PlayerControls m_Wrapper;
        public CheckDoorActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Open => m_Wrapper.m_CheckDoor_Open;
        public InputAction @Test => m_Wrapper.m_CheckDoor_Test;
        public InputAction @Exit => m_Wrapper.m_CheckDoor_Exit;
        public InputActionMap Get() { return m_Wrapper.m_CheckDoor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheckDoorActions set) { return set.Get(); }
        public void AddCallbacks(ICheckDoorActions instance)
        {
            if (instance == null || m_Wrapper.m_CheckDoorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheckDoorActionsCallbackInterfaces.Add(instance);
            @Open.started += instance.OnOpen;
            @Open.performed += instance.OnOpen;
            @Open.canceled += instance.OnOpen;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(ICheckDoorActions instance)
        {
            @Open.started -= instance.OnOpen;
            @Open.performed -= instance.OnOpen;
            @Open.canceled -= instance.OnOpen;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(ICheckDoorActions instance)
        {
            if (m_Wrapper.m_CheckDoorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheckDoorActions instance)
        {
            foreach (var item in m_Wrapper.m_CheckDoorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheckDoorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheckDoorActions @CheckDoor => new CheckDoorActions(this);

    // Statistics
    private readonly InputActionMap m_Statistics;
    private List<IStatisticsActions> m_StatisticsActionsCallbackInterfaces = new List<IStatisticsActions>();
    private readonly InputAction m_Statistics_Back;
    private readonly InputAction m_Statistics_ToPostAssessment;
    private readonly InputAction m_Statistics_ToMainMenu;
    public struct StatisticsActions
    {
        private @PlayerControls m_Wrapper;
        public StatisticsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_Statistics_Back;
        public InputAction @ToPostAssessment => m_Wrapper.m_Statistics_ToPostAssessment;
        public InputAction @ToMainMenu => m_Wrapper.m_Statistics_ToMainMenu;
        public InputActionMap Get() { return m_Wrapper.m_Statistics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StatisticsActions set) { return set.Get(); }
        public void AddCallbacks(IStatisticsActions instance)
        {
            if (instance == null || m_Wrapper.m_StatisticsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StatisticsActionsCallbackInterfaces.Add(instance);
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @ToPostAssessment.started += instance.OnToPostAssessment;
            @ToPostAssessment.performed += instance.OnToPostAssessment;
            @ToPostAssessment.canceled += instance.OnToPostAssessment;
            @ToMainMenu.started += instance.OnToMainMenu;
            @ToMainMenu.performed += instance.OnToMainMenu;
            @ToMainMenu.canceled += instance.OnToMainMenu;
        }

        private void UnregisterCallbacks(IStatisticsActions instance)
        {
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @ToPostAssessment.started -= instance.OnToPostAssessment;
            @ToPostAssessment.performed -= instance.OnToPostAssessment;
            @ToPostAssessment.canceled -= instance.OnToPostAssessment;
            @ToMainMenu.started -= instance.OnToMainMenu;
            @ToMainMenu.performed -= instance.OnToMainMenu;
            @ToMainMenu.canceled -= instance.OnToMainMenu;
        }

        public void RemoveCallbacks(IStatisticsActions instance)
        {
            if (m_Wrapper.m_StatisticsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStatisticsActions instance)
        {
            foreach (var item in m_Wrapper.m_StatisticsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StatisticsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StatisticsActions @Statistics => new StatisticsActions(this);
    public interface IMainMenuActions
    {
        void OnAction(InputAction.CallbackContext context);
        void OnPreviousCategory(InputAction.CallbackContext context);
        void OnNextCategory(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface ILoadingUIActions
    {
        void OnAction(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnExamine(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
    public interface IPlayerLayingDownActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
    }
    public interface IExamineActions
    {
        void OnLock(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnGamepadRotation(InputAction.CallbackContext context);
        void OnRead(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnAction(InputAction.CallbackContext context);
        void OnPreviousCategory(InputAction.CallbackContext context);
        void OnNextCategory(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface ISpeechDialogueActions
    {
        void OnAction(InputAction.CallbackContext context);
        void OnOption1(InputAction.CallbackContext context);
        void OnOption2(InputAction.CallbackContext context);
        void OnOption3(InputAction.CallbackContext context);
    }
    public interface IContactActions
    {
        void OnContact1(InputAction.CallbackContext context);
        void OnContact2(InputAction.CallbackContext context);
        void OnContact3(InputAction.CallbackContext context);
    }
    public interface ITPASSActions
    {
        void OnEquipExtinguisher(InputAction.CallbackContext context);
        void OnPerformTPASS(InputAction.CallbackContext context);
    }
    public interface ITwistFEActions
    {
        void OnButton1(InputAction.CallbackContext context);
        void OnButton2(InputAction.CallbackContext context);
        void OnButton3(InputAction.CallbackContext context);
        void OnButton4(InputAction.CallbackContext context);
    }
    public interface IPullFEActions
    {
        void OnAction(InputAction.CallbackContext context);
        void OnActionLock(InputAction.CallbackContext context);
    }
    public interface IAimFEActions
    {
        void OnDrop(InputAction.CallbackContext context);
        void OnExamine(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnOption1(InputAction.CallbackContext context);
        void OnOption2(InputAction.CallbackContext context);
    }
    public interface INavigateUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
    }
    public interface ISqueezeSweepFEActions
    {
        void OnAction(InputAction.CallbackContext context);
    }
    public interface IStayCalmActions
    {
        void OnButton1(InputAction.CallbackContext context);
        void OnButton2(InputAction.CallbackContext context);
        void OnButton3(InputAction.CallbackContext context);
        void OnButton4(InputAction.CallbackContext context);
    }
    public interface ICheckDoorActions
    {
        void OnOpen(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface IStatisticsActions
    {
        void OnBack(InputAction.CallbackContext context);
        void OnToPostAssessment(InputAction.CallbackContext context);
        void OnToMainMenu(InputAction.CallbackContext context);
    }
}
